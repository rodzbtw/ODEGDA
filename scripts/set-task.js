console.log('Set-task.js –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
console.log('=== –ó–ê–í–î–ê–ù–ù–Ø 4: –†–æ–±–æ—Ç–∞ –∑ Set ===\n');

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Set –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ñ—Ä–∞–∑
let previousPhrases = new Set();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó)
function normalizeText(text) {
    return text
        .toLowerCase()
        .replace(/[.,!?;:'"¬´¬ª()]/g, '')
        .trim();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Set –∑—ñ —Å–ª—ñ–≤
function getWordsSet(phrase) {
    const normalizedPhrase = normalizeText(phrase);
    const wordsArray = normalizedPhrase.split(/\s+/).filter(word => word.length > 0);
    return new Set(wordsArray);
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª—ñ–≤
function findCommonWords() {
    const phrase1 = document.getElementById('phrase1').value.trim();
    const phrase2 = document.getElementById('phrase2').value.trim();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è
    if (!phrase1 || !phrase2) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–±–∏–¥–≤—ñ —Ñ—Ä–∞–∑–∏!');
        return;
    }

    console.log('\n=== –ê–Ω–∞–ª—ñ–∑ —Ñ—Ä–∞–∑ ===');
    console.log('–§—Ä–∞–∑–∞ 1:', phrase1);
    console.log('–§—Ä–∞–∑–∞ 2:', phrase2);

    // –°—Ç–≤–æ—Ä—é—î–º–æ Set –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ñ—Ä–∞–∑–∏
    const wordsSet1 = getWordsSet(phrase1);
    const wordsSet2 = getWordsSet(phrase2);

    console.log('Set 1 (—É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞ –∑ —Ñ—Ä–∞–∑–∏ 1):', wordsSet1);
    console.log('–†–æ–∑–º—ñ—Ä Set 1:', wordsSet1.size);
    console.log('Set 2 (—É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞ –∑ —Ñ—Ä–∞–∑–∏ 2):', wordsSet2);
    console.log('–†–æ–∑–º—ñ—Ä Set 2:', wordsSet2.size);

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–∞
    const commonWords = new Set();
    
    wordsSet1.forEach(word => {
        if (wordsSet2.has(word)) {
            commonWords.add(word);
            console.log(`‚úÖ –°–ø—ñ–ª—å–Ω–µ —Å–ª–æ–≤–æ –∑–Ω–∞–π–¥–µ–Ω–æ: "${word}"`);
        }
    });

    console.log('\n–†–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–∞ (Set):', commonWords);
    console.log('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª—ñ–≤:', commonWords.size);

    // –î–æ–¥–∞—î–º–æ —Ñ—Ä–∞–∑–∏ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó (Set –Ω–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤)
    previousPhrases.add(phrase1);
    previousPhrases.add(phrase2);
    
    console.log('–í—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏ (Set):', previousPhrases);
    console.log('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ñ—Ä–∞–∑:', previousPhrases.size);

    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    displayResults(phrase1, phrase2, commonWords);
    
    console.log('=== –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===\n');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
function displayResults(phrase1, phrase2, commonWordsSet) {
    const resultsDiv = document.getElementById('results');
    const displayPhrase1 = document.getElementById('displayPhrase1');
    const displayPhrase2 = document.getElementById('displayPhrase2');
    const commonWordsDiv = document.getElementById('commonWords');

    // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    resultsDiv.classList.add('show');

    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ñ—Ä–∞–∑–∏
    displayPhrase1.textContent = phrase1;
    displayPhrase2.textContent = phrase2;

    // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–∞
    commonWordsDiv.innerHTML = '';

    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–∞
    if (commonWordsSet.size === 0) {
        commonWordsDiv.innerHTML = '<div class="no-common">‚ùå –°–ø—ñ–ª—å–Ω–∏—Ö —Å–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>';
    } else {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ forEach –¥–ª—è Set
        commonWordsSet.forEach(word => {
            const wordTag = document.createElement('div');
            wordTag.className = 'word-tag';
            wordTag.textContent = `‚úì ${word}`;
            commonWordsDiv.appendChild(wordTag);
        });
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
function clearAll() {
    document.getElementById('phrase1').value = '';
    document.getElementById('phrase2').value = '';
    
    const resultsDiv = document.getElementById('results');
    resultsDiv.classList.remove('show');
    
    console.log('üßπ –ü–æ–ª—è –æ—á–∏—â–µ–Ω–æ');
    document.getElementById('phrase1').focus();
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ Enter –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
document.getElementById('phrase1').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        document.getElementById('phrase2').focus();
    }
});

document.getElementById('phrase2').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        findCommonWords();
    }
});

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π Set
console.log('üìö –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–±–æ—Ç–∏ –∑ Set:');
const exampleSet = new Set();
exampleSet.add('–ø—Ä–∏–≤—ñ—Ç');
exampleSet.add('—Å–≤—ñ—Ç');
exampleSet.add('–ø—Ä–∏–≤—ñ—Ç'); // –î—É–±–ª—ñ–∫–∞—Ç –Ω–µ –±—É–¥–µ –¥–æ–¥–∞–Ω–∏–π
console.log('Set:', exampleSet);
console.log('–†–æ–∑–º—ñ—Ä:', exampleSet.size);
console.log('–ß–∏ —î "–ø—Ä–∏–≤—ñ—Ç"?', exampleSet.has('–ø—Ä–∏–≤—ñ—Ç'));
console.log('–ß–∏ —î "javascript"?', exampleSet.has('javascript'));

console.log('\n‚úÖ Set-task.js –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!\n');
