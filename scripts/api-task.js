console.log('=== –ó–ê–í–î–ê–ù–ù–Ø 5: –†–æ–±–æ—Ç–∞ –∑ API —Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===\n');

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤
let stats = {
    total: 0,
    success: 0,
    errors: 0
};

/**
 * –ê–°–ò–ù–•–†–û–ù–ù–ê –§–£–ù–ö–¶–Ü–Ø –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î: async/await, fetch, try/catch, promises
 */
async function fetchRandomDog() {
    console.log('\nüöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Ç—É –¥–æ Dog CEO API...');
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    showLoading();
    
    // URL API (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó)
    const API_URL = 'https://dog.ceo/api/breeds/image/random';
    
    try {
        console.log('üì° –í–∏–∫–æ–Ω—É—î–º–æ fetch –∑–∞–ø–∏—Ç:', API_URL);
        
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ API
        const response = await fetch(API_URL);
        
        console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
        console.log('–°—Ç–∞—Ç—É—Å:', response.status, response.statusText);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π
        if (!response.ok) {
            throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞! –°—Ç–∞—Ç—É—Å: ${response.status}`);
        }
        
        // –ü–∞—Ä—Å–∏–º–æ JSON (—Ç–µ–∂ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è)
        const data = await response.json();
        
        console.log('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ:', data);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
        if (data.status === 'success') {
            // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            displayDogImage(data.message);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats.success++;
            stats.total++;
            updateStats();
            
            console.log('üéâ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ!');
        } else {
            throw new Error('API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–µ–≤–¥–∞–ª–∏–π —Å—Ç–∞—Ç—É—Å');
        }
        
    } catch (error) {
        // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API:', error);
        console.error('–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', error.message);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        showError(error.message);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats.errors++;
        stats.total++;
        updateStats();
        
    } finally {
        // –•–æ–≤–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É
        hideLoading();
        console.log('üèÅ –ó–∞–ø–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n');
    }
}

/**
 * –ê–°–ò–ù–•–†–û–ù–ù–ê –§–£–ù–ö–¶–Ü–Ø –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö —Ñ–æ—Ç–æ
 * –î–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä–æ–±–æ—Ç—É –∑ Promise.all()
 */
async function fetchMultipleDogs() {
    console.log('\nüöÄ –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è 3 —Å–æ–±–∞–∫ –æ–¥–Ω–æ—á–∞—Å–Ω–æ...');
    
    showLoading();
    
    const API_URL = 'https://dog.ceo/api/breeds/image/random';
    
    try {
        console.log('üì° –°—Ç–≤–æ—Ä—é—î–º–æ 3 –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç–∏...');
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ –ø—Ä–æ–º—ñ—Å—ñ–≤
        const promises = [
            fetch(API_URL),
            fetch(API_URL),
            fetch(API_URL)
        ];
        
        console.log('‚è≥ –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤—Å—ñ –ø—Ä–æ–º—ñ—Å—ñ (Promise.all)...');
        
        // –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
        const responses = await Promise.all(promises);
        
        console.log('üì• –í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ!');
        
        // –ü–∞—Ä—Å–∏–º–æ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const dataPromises = responses.map(response => {
            if (!response.ok) {
                throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞! –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }
            return response.json();
        });
        
        const allData = await Promise.all(dataPromises);
        
        console.log('‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ:', allData);
        
        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        document.getElementById('results').innerHTML = '';
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        allData.forEach((data, index) => {
            if (data.status === 'success') {
                displayDogImage(data.message, index + 1);
            }
        });
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats.success += allData.length;
        stats.total += allData.length;
        updateStats();
        
        console.log('üéâ –í—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ!');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–Ω–æ–∂–∏–Ω–Ω–æ–º—É –∑–∞–ø–∏—Ç—ñ:', error);
        showError(error.message);
        
        stats.errors++;
        stats.total++;
        updateStats();
        
    } finally {
        hideLoading();
        console.log('üèÅ –ú–Ω–æ–∂–∏–Ω–Ω–∏–π –∑–∞–ø–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n');
    }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–æ–±–∞–∫–∏
 */
function displayDogImage(imageUrl, number = null) {
    const resultsDiv = document.getElementById('results');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä–æ–¥—É –∑ URL (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)
    const urlParts = imageUrl.split('/');
    const breed = urlParts[urlParts.length - 2] || 'Unknown breed';
    const breedName = breed.charAt(0).toUpperCase() + breed.slice(1);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
    const dogCard = document.createElement('div');
    dogCard.className = 'dog-card';
    dogCard.innerHTML = `
        <div class="dog-image-container">
            <img src="${imageUrl}" alt="${breedName}" class="dog-image" loading="lazy">
        </div>
        <div class="dog-info">
            <h3 class="dog-breed">${number ? `#${number} - ` : ''}${breedName}</h3>
            <p class="dog-timestamp">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${new Date().toLocaleTimeString('uk-UA')}</p>
            <button class="btn download-btn" onclick="downloadImage('${imageUrl}', '${breedName}')">
                <span class="btn-icon">‚¨áÔ∏è</span>
                –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ
            </button>
        </div>
    `;
    
    resultsDiv.appendChild(dogCard);
    
    console.log(`üñºÔ∏è –î–æ–¥–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${breedName}`);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 */
function showLoading() {
    document.getElementById('loading').classList.add('show');
}

/**
 * –°—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 */
function hideLoading() {
    document.getElementById('loading').classList.remove('show');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 */
function showError(message) {
    const resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = `
        <div class="error-message">
            <div class="error-icon">‚ö†Ô∏è</div>
            <h3>–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞</h3>
            <p>${message}</p>
            <p style="margin-top: 1rem; font-size: 0.9rem; opacity: 0.8;">
                –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
            </p>
        </div>
    `;
}

/**
 * –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
 */
function clearResults() {
    document.getElementById('results').innerHTML = '';
    console.log('üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ—á–∏—â–µ–Ω–æ');
}

/**
 * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
function updateStats() {
    const statsDiv = document.getElementById('stats');
    statsDiv.style.display = 'grid';
    
    document.getElementById('totalRequests').textContent = stats.total;
    document.getElementById('successRequests').textContent = stats.success;
    document.getElementById('errorRequests').textContent = stats.errors;
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞:', stats);
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
async function downloadImage(url, name) {
    try {
        console.log('‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', url);
        
        const response = await fetch(url);
        const blob = await response.blob();
        const blobUrl = window.URL.createObjectURL(blob);
        
        const link = document.createElement('a');
        link.href = blobUrl;
        link.download = `${name}-${Date.now()}.jpg`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        window.URL.revokeObjectURL(blobUrl);
        
        console.log('‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
        alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
    }
}

/**
 * –ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
 */
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        console.log('üìã –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä:', text);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const btn = event.target;
        const originalText = btn.textContent;
        btn.textContent = '‚úì –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!';
        btn.style.background = 'var(--success)';
        btn.style.color = 'white';
        btn.style.borderColor = 'var(--success)';
        
        setTimeout(() => {
            btn.textContent = originalText;
            btn.style.background = '';
            btn.style.color = '';
            btn.style.borderColor = '';
        }, 2000);
    }).catch(err => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', err);
    });
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ö —Å–ø–æ—Å–æ–±—ñ–≤ —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–º—ñ—Å–∞–º–∏
console.log('üìö –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ü–µ–ø—Ü—ñ–π JavaScript:\n');

// 1. Promise
console.log('1Ô∏è‚É£ Promise –ø—Ä–∏–∫–ª–∞–¥:');
const simplePromise = new Promise((resolve, reject) => {
    setTimeout(() => resolve('Promise –≤–∏–∫–æ–Ω–∞–Ω–æ!'), 1000);
});
console.log('Promise —Å—Ç–≤–æ—Ä–µ–Ω–æ:', simplePromise);

// 2. Async/Await
console.log('\n2Ô∏è‚É£ Async/Await - —Ñ—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î Promise');

// 3. Fetch
console.log('\n3Ô∏è‚É£ Fetch API - —Å—É—á–∞—Å–Ω–∏–π —Å–ø–æ—Å—ñ–± HTTP –∑–∞–ø–∏—Ç—ñ–≤');
console.log('–ó–∞–º—ñ—Å—Ç—å XMLHttpRequest –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fetch()');

// 4. Try/Catch
console.log('\n4Ô∏è‚É£ Try/Catch - –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤ async —Ñ—É–Ω–∫—Ü—ñ—è—Ö');
console.log('–ë–µ–∑ try/catch –ø–æ–º–∏–ª–∫–∏ –º–æ–∂—É—Ç—å "–ø—Ä–æ–∫–æ–≤–∑–Ω—É—Ç–∏"\n');

console.log('‚úÖ API Task –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');
console.log('üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–æ–±–∞–∫—É –∑ API\n');

