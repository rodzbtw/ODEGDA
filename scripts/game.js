console.log('=== –ó–ê–í–î–ê–ù–ù–Ø 6: Canvas - –ö–æ—Å–º—ñ—á–Ω–∞ –≥—Ä–∞ ===\n');

// –û—Ç—Ä–∏–º—É—î–º–æ canvas —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

console.log('‚úì Canvas —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:', canvas.width, 'x', canvas.height);
console.log('‚úì 2D Context –æ—Ç—Ä–∏–º–∞–Ω–æ:', ctx);

// –ó–º—ñ–Ω–Ω—ñ –≥—Ä–∏
let gameRunning = false;
let gamePaused = false;
let animationId;
let score = 0;
let highScore = localStorage.getItem('spaceGameHighScore') || 0;
let lives = 3;
let gameSpeed = 2;

// –ì—Ä–∞–≤–µ—Ü—å (—Ä–∞–∫–µ—Ç–∞)
const player = {
    x: 50,
    y: canvas.height / 2,
    width: 40,
    height: 60,
    speed: 5,
    color: '#6366f1'
};

// –ú–∞—Å–∏–≤–∏ –¥–ª—è –ø–µ—Ä–µ—à–∫–æ–¥ —Ç–∞ –∑—ñ—Ä–æ–∫
let obstacles = [];
let stars = [];

// –ö–ª–∞–≤—ñ—à—ñ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
const keys = {
    ArrowUp: false,
    ArrowDown: false,
    ArrowLeft: false,
    ArrowRight: false
};

console.log('‚úì –Ü–≥—Ä–æ–≤—ñ –æ–±\'—î–∫—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ');

// === –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô ===

// –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ
document.addEventListener('keydown', (e) => {
    if (keys.hasOwnProperty(e.key)) {
        keys[e.key] = true;
        e.preventDefault();
    }
});

// –í—ñ–¥–ø—É—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ
document.addEventListener('keyup', (e) => {
    if (keys.hasOwnProperty(e.key)) {
        keys[e.key] = false;
        e.preventDefault();
    }
});

console.log('‚úì –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–ª–∞–≤—ñ—à –¥–æ–¥–∞–Ω–æ');

// === –§–£–ù–ö–¶–Ü–á –ú–ê–õ–Æ–í–ê–ù–ù–Ø (Canvas API) ===

/**
 * –ú–∞–ª—é—î —Ä–∞–∫–µ—Ç—É –≥—Ä–∞–≤—Ü—è
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î fillRect, beginPath, arc
 */
function drawPlayer() {
    // –¢—ñ–ª–æ —Ä–∞–∫–µ—Ç–∏
    ctx.fillStyle = player.color;
    ctx.fillRect(player.x, player.y, player.width, player.height);
    
    // –í—ñ–∫–Ω–∞ —Ä–∞–∫–µ—Ç–∏
    ctx.fillStyle = '#93c5fd';
    ctx.beginPath();
    ctx.arc(player.x + 20, player.y + 20, 8, 0, Math.PI * 2);
    ctx.fill();
    
    // –í–æ–≥–æ–Ω—å –∑ –¥–≤–∏–≥—É–Ω–∞
    ctx.fillStyle = '#fbbf24';
    ctx.beginPath();
    ctx.moveTo(player.x, player.y + player.height - 10);
    ctx.lineTo(player.x - 15, player.y + player.height / 2);
    ctx.lineTo(player.x, player.y + 10);
    ctx.closePath();
    ctx.fill();
}

/**
 * –ú–∞–ª—é—î –ø–µ—Ä–µ—à–∫–æ–¥—É (–∞—Å—Ç–µ—Ä–æ—ó–¥)
 */
function drawObstacle(obstacle) {
    ctx.fillStyle = obstacle.color;
    ctx.beginPath();
    ctx.arc(obstacle.x, obstacle.y, obstacle.radius, 0, Math.PI * 2);
    ctx.fill();
    
    // –¢—ñ–Ω—å
    ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';
    ctx.lineWidth = 3;
    ctx.stroke();
}

/**
 * –ú–∞–ª—é—î –∑—ñ—Ä–∫—É (–±–æ–Ω—É—Å)
 */
function drawStar(star) {
    ctx.fillStyle = star.color;
    ctx.beginPath();
    
    // –ú–∞–ª—é—î–º–æ 5-–∫—É—Ç–Ω—É –∑—ñ—Ä–∫—É
    for (let i = 0; i < 5; i++) {
        const angle = (Math.PI * 2 * i) / 5 - Math.PI / 2;
        const x = star.x + Math.cos(angle) * star.radius;
        const y = star.y + Math.sin(angle) * star.radius;
        
        if (i === 0) {
            ctx.moveTo(x, y);
        } else {
            ctx.lineTo(x, y);
        }
    }
    
    ctx.closePath();
    ctx.fill();
}

/**
 * –ú–∞–ª—é—î —Ñ–æ–Ω –∑ –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–º–∏ –∑—ñ—Ä–∫–∞–º–∏
 */
function drawBackground() {
    // –ß–æ—Ä–Ω–∏–π —Ñ–æ–Ω
    ctx.fillStyle = '#000';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // –ë—ñ–ª—ñ —Ç–æ—á–∫–∏-–∑—ñ—Ä–∫–∏ –Ω–∞ —Ñ–æ–Ω—ñ
    ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';
    for (let i = 0; i < 50; i++) {
        const x = (i * 30 + Date.now() * 0.05) % canvas.width;
        const y = (i * 47) % canvas.height;
        ctx.fillRect(x, y, 2, 2);
    }
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î fillText
 */
function drawUI() {
    ctx.fillStyle = '#fff';
    ctx.font = 'bold 24px Inter';
    ctx.fillText(`–û—á–∫–∏: ${score}`, 20, 40);
    ctx.fillText(`–ñ–∏—Ç—Ç—è: ${'‚ù§Ô∏è'.repeat(lives)}`, 20, 80);
    ctx.fillText(`–†–µ–∫–æ—Ä–¥: ${highScore}`, canvas.width - 200, 40);
    
    if (gamePaused) {
        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        ctx.fillStyle = '#fff';
        ctx.font = 'bold 48px Inter';
        ctx.textAlign = 'center';
        ctx.fillText('–ü–ê–£–ó–ê', canvas.width / 2, canvas.height / 2);
        ctx.textAlign = 'left';
    }
}

// === –õ–û–ì–Ü–ö–ê –ì–†–ò ===

/**
 * –û–Ω–æ–≤–ª—é—î –ø–æ–∑–∏—Ü—ñ—é –≥—Ä–∞–≤—Ü—è
 */
function updatePlayer() {
    if (keys.ArrowUp && player.y > 0) {
        player.y -= player.speed;
    }
    if (keys.ArrowDown && player.y < canvas.height - player.height) {
        player.y += player.speed;
    }
    if (keys.ArrowLeft && player.x > 0) {
        player.x -= player.speed;
    }
    if (keys.ArrowRight && player.x < canvas.width - player.width) {
        player.x += player.speed;
    }
}

/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –ø–µ—Ä–µ—à–∫–æ–¥—É
 */
function createObstacle() {
    const radius = Math.random() * 30 + 20;
    obstacles.push({
        x: canvas.width + radius,
        y: Math.random() * (canvas.height - radius * 2) + radius,
        radius: radius,
        speed: gameSpeed + Math.random() * 2,
        color: '#ef4444'
    });
}

/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –∑—ñ—Ä–∫—É (–±–æ–Ω—É—Å)
 */
function createStar() {
    stars.push({
        x: canvas.width + 20,
        y: Math.random() * (canvas.height - 40) + 20,
        radius: 15,
        speed: gameSpeed,
        color: '#10b981'
    });
}

/**
 * –û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ—à–∫–æ–¥–∏
 */
function updateObstacles() {
    obstacles = obstacles.filter(obstacle => obstacle.x + obstacle.radius > 0);
    
    obstacles.forEach(obstacle => {
        obstacle.x -= obstacle.speed;
    });
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø–µ—Ä–µ—à–∫–æ–¥—É –≤–∏–ø–∞–¥–∫–æ–≤–æ
    if (Math.random() < 0.02) {
        createObstacle();
        console.log('ü™® –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –ø–µ—Ä–µ—à–∫–æ–¥—É');
    }
}

/**
 * –û–Ω–æ–≤–ª—é—î –∑—ñ—Ä–∫–∏
 */
function updateStars() {
    stars = stars.filter(star => star.x + star.radius > 0);
    
    stars.forEach(star => {
        star.x -= star.speed;
    });
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∑—ñ—Ä–∫—É –≤–∏–ø–∞–¥–∫–æ–≤–æ
    if (Math.random() < 0.01) {
        createStar();
        console.log('‚≠ê –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –∑—ñ—Ä–∫—É');
    }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π (–∑—ñ—Ç–∫–Ω–µ–Ω—å)
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ—Ç–∏–Ω—É –∫—Ä—É–≥—ñ–≤
 */
function checkCollisions() {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ—à–∫–æ–¥–∞–º–∏
    obstacles.forEach((obstacle, index) => {
        const dx = (player.x + player.width / 2) - obstacle.x;
        const dy = (player.y + player.height / 2) - obstacle.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < obstacle.radius + 20) {
            console.warn('üí• –ó–Ü–¢–ö–ù–ï–ù–ù–Ø –∑ –∞—Å—Ç–µ—Ä–æ—ó–¥–æ–º!');
            obstacles.splice(index, 1);
            lives--;
            updateLivesDisplay();
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–∞—à—É
            if (lives <= 0) {
                gameOver();
            }
        }
    });
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–æ—Ä—É –∑—ñ—Ä–æ–∫
    stars.forEach((star, index) => {
        const dx = (player.x + player.width / 2) - star.x;
        const dy = (player.y + player.height / 2) - star.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < star.radius + 20) {
            console.log('‚ú® –ó—ñ—Ä–∫—É –∑—ñ–±—Ä–∞–Ω–æ! +10 –æ—á–æ–∫');
            stars.splice(index, 1);
            score += 10;
            updateScoreDisplay();
        }
    });
}

/**
 * –û–Ω–æ–≤–ª—é—î –æ—á–∫–∏
 */
function updateScore() {
    score++;
    if (score % 10 === 0) {
        updateScoreDisplay();
        
        // –ó–±—ñ–ª—å—à—É—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
        if (score % 100 === 0) {
            gameSpeed += 0.5;
            console.log('‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–æ –¥–æ:', gameSpeed);
        }
    }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–≥—Ä–æ–≤–∏–π —Ü–∏–∫–ª
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î requestAnimationFrame
 */
function gameLoop() {
    if (!gameRunning || gamePaused) return;
    
    // –û—á–∏—â–∞—î–º–æ canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –ú–∞–ª—é—î–º–æ –≤—Å–µ
    drawBackground();
    drawPlayer();
    obstacles.forEach(drawObstacle);
    stars.forEach(drawStar);
    drawUI();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥—ñ–∫—É
    updatePlayer();
    updateObstacles();
    updateStars();
    checkCollisions();
    updateScore();
    
    // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ü–∏–∫–ª
    animationId = requestAnimationFrame(gameLoop);
}

// === –ö–ï–†–£–í–ê–ù–ù–Ø –ì–†–û–Æ ===

/**
 * –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
 */
function startGame() {
    if (gameRunning) return;
    
    console.log('\nüöÄ === –ì–†–ê –ü–û–ß–ê–õ–ê–°–Ø ===');
    gameRunning = true;
    gamePaused = false;
    
    document.getElementById('startBtn').disabled = true;
    
    gameLoop();
}

/**
 * –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
 */
function togglePause() {
    if (!gameRunning) return;
    
    gamePaused = !gamePaused;
    console.log(gamePaused ? '‚è∏Ô∏è –ü–ê–£–ó–ê' : '‚ñ∂Ô∏è –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø');
    
    if (!gamePaused) {
        gameLoop();
    }
}

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≥—Ä–∏
 */
function restartGame() {
    console.log('\nüîÑ === –ü–ï–†–ï–ó–ê–ü–£–°–ö –ì–†–ò ===');
    
    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≥—Ä—É
    gameRunning = false;
    gamePaused = false;
    cancelAnimationFrame(animationId);
    
    // –°–∫–∏–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    score = 0;
    lives = 3;
    gameSpeed = 2;
    obstacles = [];
    stars = [];
    
    // –°–∫–∏–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –≥—Ä–∞–≤—Ü—è
    player.x = 50;
    player.y = canvas.height / 2;
    
    // –•–æ–≤–∞—î–º–æ –µ–∫—Ä–∞–Ω –ø—Ä–æ–≥—Ä–∞—à—É
    document.getElementById('gameOverScreen').classList.remove('show');
    document.getElementById('startBtn').disabled = false;
    
    // –û–Ω–æ–≤–ª—é—î–º–æ UI
    updateScoreDisplay();
    updateLivesDisplay();
    
    // –û—á–∏—â–∞—î–º–æ canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBackground();
    drawPlayer();
    
    console.log('‚úÖ –ì—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞');
}

/**
 * –ö—ñ–Ω–µ—Ü—å –≥—Ä–∏
 */
function gameOver() {
    console.log('\nüíÄ === GAME OVER ===');
    console.log('–§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫:', score);
    
    gameRunning = false;
    cancelAnimationFrame(animationId);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∫–æ—Ä–¥
    if (score > highScore) {
        highScore = score;
        localStorage.setItem('spaceGameHighScore', highScore);
        console.log('üèÜ –ù–û–í–ò–ô –†–ï–ö–û–†–î:', highScore);
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –µ–∫—Ä–∞–Ω –ø—Ä–æ–≥—Ä–∞—à—É
    document.getElementById('finalScore').textContent = score;
    document.getElementById('gameOverScreen').classList.add('show');
    document.getElementById('startBtn').disabled = false;
    
    updateHighScoreDisplay();
}

// === –û–ù–û–í–õ–ï–ù–ù–Ø UI ===

function updateScoreDisplay() {
    document.getElementById('currentScore').textContent = score;
}

function updateHighScoreDisplay() {
    document.getElementById('highScore').textContent = highScore;
}

function updateLivesDisplay() {
    document.getElementById('livesCount').textContent = lives;
}

// === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===

// –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –µ–∫—Ä–∞–Ω
drawBackground();
drawPlayer();
updateHighScoreDisplay();

console.log('\nüìã === –Ü–ù–°–¢–†–£–ö–¶–Ü–á ===');
console.log('üéÆ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç—Ä—ñ–ª–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è');
console.log('ü™® –£–Ω–∏–∫–∞–π—Ç–µ —á–µ—Ä–≤–æ–Ω–∏—Ö –∞—Å—Ç–µ—Ä–æ—ó–¥—ñ–≤');
console.log('‚≠ê –ó–±–∏—Ä–∞–π—Ç–µ –∑–µ–ª–µ–Ω—ñ –∑—ñ—Ä–∫–∏ (+10 –æ—á–æ–∫)');
console.log('üíö –£ –≤–∞—Å —î 3 –∂–∏—Ç—Ç—è');
console.log('\n‚úÖ –ì—Ä–∞ –≥–æ—Ç–æ–≤–∞! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –≥—Ä—É"');

